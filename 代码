import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Random;
import java.util.Stack;

public class Maze extends JPanel {
    private int NUM, width, padding;// width 每个格子的宽度和高度
    private Lattice[][] maze;
    private int ballX, ballY;
    private boolean drawPath = false;
    Maze(int m, int wi, int p) {
        NUM = m;
        width = wi;
        padding = p;
        maze = new Lattice[NUM][NUM];
        for (int i = 0; i <= NUM - 1; i++)
            for (int j = 0; j <= NUM - 1; j++)
                maze[i][j] = new Lattice(i, j);
        createMaze();
        setKeyListener();
        this.setFocusable(true);
    }
    //重新绘图
    private void init() {
        for (int i = 0; i <= NUM - 1; i++)
            for (int j = 0; j <= NUM - 1; j++) {
                maze[i][j].setFather(null);
                maze[i][j].setFlag(Lattice.NOTINTREE);
            }
        ballX = 0;
        ballY = 0;
        drawPath = false;
        createMaze();
        setKeyListener();
        this.setFocusable(true);
        repaint();
    }
    public int getCenterX(int x) {
        return padding + x * width + width / 2;
    }
    public int getCenterY(int y) {
        return padding + y * width + width / 2;
    }

    public int getCenterX(Lattice p) {
        return padding + p.getY() * width + width / 2;
    }
    public int getCenterY(Lattice p) {
        return padding + p.getX() * width + width / 2;
    }
    private void checkIsWin() {
        if (ballX == NUM - 1 && ballY == NUM - 1) {
            JOptionPane.showMessageDialog(null, "YOU WIN !", "你走出了迷宫。",
                    JOptionPane.PLAIN_MESSAGE);//弹出对话框，结束游戏
            init();//重新绘图
        }
    }
    synchronized private void move(int c) {
        int tx = ballX, ty = ballY;
        // System.out.println(c);
        switch (c) {
            case KeyEvent.VK_LEFT :
                ty--;
                break;
            case KeyEvent.VK_RIGHT :
                ty++;
                break;
            case KeyEvent.VK_UP :
                tx--;
                break;
            case KeyEvent.VK_DOWN :
                tx++;
                break;
            case KeyEvent.VK_SPACE :
                if (drawPath == true) {
                    drawPath = false;
                } else {
                    drawPath = true;
                }
                break;
            default :
        }
        if (!isOutOfBorder(tx, ty)
                && (maze[tx][ty].getFather() == maze[ballX][ballY]
                || maze[ballX][ballY].getFather() == maze[tx][ty])) {
            ballX = tx;
            ballY = ty;
        }
    }
    private void setKeyListener() {
        this.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                int c = e.getKeyCode();
                move(c);
                repaint();
                checkIsWin();
            }
        });
    }
    private boolean isOutOfBorder(Lattice p) {
        return isOutOfBorder(p.getX(), p.getY());
    }
    private boolean isOutOfBorder(int x, int y) {
        return (x > NUM - 1 || y > NUM - 1 || x < 0 || y < 0) ? true : false;
    }
    private Lattice[] getNeis(Lattice p) {
        final int[] adds = {-1, 0, 1, 0, -1};// 顺序为上右下左
        if (isOutOfBorder(p)) {
            return null;
        }
        Lattice[] ps = new Lattice[4];// 顺序为上右下左
        int xt;
        int yt;
        for (int i = 0; i <= 3; i++) {
            xt = p.getX() + adds[i];
            yt = p.getY() + adds[i + 1];
            if (isOutOfBorder(xt, yt))
                continue;
            ps[i] = maze[xt][yt];
        }
        return ps;
    }
    private void createMaze() {
        Random random = new Random();
        int rx = Math.abs(random.nextInt()) % NUM;
        int ry = Math.abs(random.nextInt()) % NUM;
        Stack<Lattice> s = new Stack<Lattice>();
        Lattice p = maze[rx][ry];
        Lattice neis[] = null;
        s.push(p);
        //若s不为空执行
        while (!s.isEmpty()) {
            p = s.pop();
            p.setFlag(Lattice.INTREE);
            neis = getNeis(p);
            int ran = Math.abs(random.nextInt()) % 4;
            for (int a = 0; a <= 3; a++) {
                ran++;
                ran %= 4;
                if (neis[ran] == null || neis[ran].getFlag() == Lattice.INTREE)
                    continue;
                s.push(neis[ran]);
                neis[ran].setFather(p);
            }
        }
    }
    private void changeFather(Lattice p, Lattice f) {
        if (p.getFather() == null) {
            p.setFather(f);
            //return;
        } else {
            changeFather(p.getFather(), p);
        }
    }
    private void clearFence(int i, int j, int fx, int fy, Graphics g) {
        int sx = padding + ((j > fy ? j : fy) * width),
                sy = padding + ((i > fx ? i : fx) * width),
                dx = (i == fx ? sx : sx + width),
                dy = (i == fx ? sy + width : sy);
        if (sx != dx) {
            sx++;
            dx--;
        } else {
            sy++;
            dy--;
        }
        g.drawLine(sx, sy, dx, dy);
    }
    //画边框
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        JPanel panel = new JPanel();
        JLabel label = new JLabel();

        for (int i = 0; i <= NUM; i++) {
            g.drawLine(padding + i * width, padding, padding + i * width,
                    padding + NUM * width);
        }
        for (int j = 0; j <= NUM; j++) {
            g.drawLine(padding, padding + j * width, padding + NUM * width,
                    padding + j * width);
        }
        g.setColor(this.getBackground());
        for (int i = NUM - 1; i >= 0; i--) {
            for (int j = NUM - 1; j >= 0; j--) {
                Lattice f = maze[i][j].getFather();
                if (f != null) {
                    int fx = f.getX(), fy = f.getY();
                    clearFence(i, j, fx, fy, g);
                }
            }
        }
        g.drawLine(padding, padding + 1, padding, padding + width - 1);
        int last = padding + NUM * width;
        g.drawLine(last, last - 1, last, last - width + 1);
        g.setColor(Color.BLACK);
        g.fillOval(getCenterX(ballY) - width / 3, getCenterY(ballX) - width / 3,
                width / 2, width / 2);
        if (drawPath == true)
            drawPath(g);
    }
    //画球
    private void drawPath(Graphics g) {
        Color PATH_COLOR = Color.red, BOTH_PATH_COLOR = Color.CYAN;
        if (drawPath == true)
            g.setColor(PATH_COLOR);
        else
            g.setColor(this.getBackground());
        Lattice p = maze[NUM - 1][NUM - 1];
        while (p.getFather() != null) {
            p.setFlag(2);
            p = p.getFather();
        }
        g.fillOval(getCenterX(p) - width / 3, getCenterY(p) - width / 3,
                width / 2, width / 2);
        p = maze[0][0];
        while (p.getFather() != null) {
            if (p.getFlag() == 2) {
                p.setFlag(3);
                g.setColor(BOTH_PATH_COLOR);
            }
            g.drawLine(getCenterX(p), getCenterY(p), getCenterX(p.getFather()),
                    getCenterY(p.getFather()));
            p = p.getFather();
        }
        g.setColor(PATH_COLOR);
        p = maze[NUM - 1][NUM - 1];
        while (p.getFather() != null) {
            if (p.getFlag() == 3)
                break;
            g.drawLine(getCenterX(p), getCenterY(p), getCenterX(p.getFather()),
                    getCenterY(p.getFather()));
            p = p.getFather();
        }
    }
    public static void main(String[] args) {
        final int n = 20, width= 800, padding = 20, LX = 500, LY = 200;
        JPanel p = new Maze(n, (width - padding - padding) / n, padding);
        JFrame frame = new JFrame("MAZE");//设置标题
        JFrame frame1 = new JFrame("MAZE");//设置标题
        JButton b1=new JButton();
        JButton b2=new JButton();
        b1.setSize(150,70);
        b1.setLocation(350,200);
        b2.setSize(150,70);
        b2.setLocation(350,400);
        b2.setBackground(Color.CYAN);
        ImageIcon b11 = new ImageIcon("images\\kaiShi.png");
        Image temp1 = b11.getImage().getScaledInstance(b1.getWidth(), b1.getHeight(), b11.getImage().SCALE_DEFAULT);
        b11 = new ImageIcon(temp1);
        b1.setIcon(b11);
        b1.setToolTipText("image");
        ImageIcon b22 = new ImageIcon("images\\ChaKan.png");
        Image temp2 = b22.getImage().getScaledInstance(b2.getWidth(), b2.getHeight(), b22.getImage().SCALE_DEFAULT);
        b22 = new ImageIcon(temp2);
        b2.setIcon(b22);
        b2.setToolTipText("image");
        //画背景
        ImageIcon icon =new ImageIcon("images\\timg.jpg");
        icon.setImage(icon.getImage().getScaledInstance(width + padding,width + padding + padding,Image.SCALE_DEFAULT));
        JLabel jlpic = new JLabel();
        JFrame jframe = new JFrame();
        jlpic.setBounds(0,0,width + padding,width + padding + padding);
        jlpic.setHorizontalAlignment(0);
        jlpic.setIcon(icon);
        frame.add(jlpic);
        frame.pack();
        frame.add(b1);
        frame.add(b2);
        frame.setLocation(LX, LY);//在屏幕中设置显示的位置
        frame.setSize(width + padding, width + padding + padding);
        frame.setLayout(null);
        frame.setVisible(true);//显示
        b1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e)
            {
                frame.dispose();
                frame1.setLocation(LX, LY);//在屏幕中设置显示的位置
                frame1.setVisible(true);//显示
                frame1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            }
        });
        b2.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e)
            {
                JOptionPane.showMessageDialog(null, "按↑↓←→来移动，按空格键显示或隐藏路径", "控制移动按钮",
                        JOptionPane.PLAIN_MESSAGE);
            }
        });
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame1.getContentPane().add(p);//用getContentPane()方法获得JFrame的内容面板，再对其加入组件
        frame1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//在一个JFrame执行关闭操作时，将退出程序。如果在代码里没加这个方法，那么在点击框架的”叉叉“退出框架后，程序仍然没有退出，只是JFrame被关闭了
        frame1.setSize(width + padding, width + padding + padding);
        frame1.setLocation(LX, LY);//在屏幕中设置显示的位置

    }
}
